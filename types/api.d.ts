/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/admin/dashboard/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_admin_dashboard_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/login/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Takes a set of user credentials and returns an access and refresh JSON web
         *     token pair to prove the authentication of those credentials. */
        post: operations["api_auth_login_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/login/refresh/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Takes a refresh type JSON web token and returns an access type JSON web
         *     token if the refresh token is valid. */
        post: operations["api_auth_login_refresh_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/logout/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["api_auth_logout_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/permissions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_auth_permissions_retrieve"];
        put?: never;
        post: operations["api_auth_permissions_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/register/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["api_auth_register_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/carts/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_carts_list"];
        put?: never;
        post: operations["api_carts_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/carts/clear/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Clear all items from the cart (POST is acceptable for this custom action). */
        post: operations["api_carts_clear_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/carts/remove_item/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Remove a cart item (RESTful: DELETE). */
        delete: operations["api_carts_remove_item_destroy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/carts/update_item/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update the quantity of a cart item (RESTful: PATCH). */
        patch: operations["api_carts_update_item_partial_update"];
        trace?: never;
    };
    "/api/categories/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_categories_list"];
        put?: never;
        post: operations["api_categories_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/categories/{category_id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_categories_retrieve"];
        put: operations["api_categories_update"];
        post?: never;
        delete: operations["api_categories_destroy"];
        options?: never;
        head?: never;
        patch: operations["api_categories_partial_update"];
        trace?: never;
    };
    "/api/categories/delete_all/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["api_categories_delete_all_destroy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/order-items/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_order_items_list"];
        put?: never;
        post: operations["api_order_items_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/order-items/{order_item_id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_order_items_retrieve"];
        put: operations["api_order_items_update"];
        post?: never;
        delete: operations["api_order_items_destroy"];
        options?: never;
        head?: never;
        patch: operations["api_order_items_partial_update"];
        trace?: never;
    };
    "/api/order-items/delete_all/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["api_order_items_delete_all_destroy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/orders/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_orders_list"];
        put?: never;
        post: operations["api_orders_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/orders/{order_id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_orders_retrieve"];
        put: operations["api_orders_update"];
        post?: never;
        delete: operations["api_orders_destroy"];
        options?: never;
        head?: never;
        patch: operations["api_orders_partial_update"];
        trace?: never;
    };
    "/api/orders/{order_id}/archive/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["api_orders_archive_partial_update"];
        trace?: never;
    };
    "/api/orders/{order_id}/update_status/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["api_orders_update_status_partial_update"];
        trace?: never;
    };
    "/api/orders/archived/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_orders_archived_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/orders/checkout/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["api_orders_checkout_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/payments/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_payments_list"];
        put?: never;
        post: operations["api_payments_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/payments/{payment_id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_payments_retrieve"];
        put: operations["api_payments_update"];
        post?: never;
        delete: operations["api_payments_destroy"];
        options?: never;
        head?: never;
        patch: operations["api_payments_partial_update"];
        trace?: never;
    };
    "/api/payments/{payment_id}/update_status/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["api_payments_update_status_partial_update"];
        trace?: never;
    };
    "/api/products/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_products_list"];
        put?: never;
        post: operations["api_products_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/products/{product_id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_products_retrieve"];
        put: operations["api_products_update"];
        post?: never;
        delete: operations["api_products_destroy"];
        options?: never;
        head?: never;
        patch: operations["api_products_partial_update"];
        trace?: never;
    };
    "/api/products/{product_id}/restore/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["api_products_restore_partial_update"];
        trace?: never;
    };
    "/api/products/{product_id}/soft_delete/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["api_products_soft_delete_partial_update"];
        trace?: never;
    };
    "/api/products/deleted/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_products_deleted_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/promos/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_promos_list"];
        put?: never;
        post: operations["api_promos_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/promos/{promo_id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_promos_retrieve"];
        put: operations["api_promos_update"];
        post?: never;
        delete: operations["api_promos_destroy"];
        options?: never;
        head?: never;
        patch: operations["api_promos_partial_update"];
        trace?: never;
    };
    "/api/promos/delete_all/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["api_promos_delete_all_destroy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/reviews/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_reviews_list"];
        put?: never;
        post: operations["api_reviews_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/reviews/{review_id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_reviews_retrieve"];
        put: operations["api_reviews_update"];
        post?: never;
        delete: operations["api_reviews_destroy"];
        options?: never;
        head?: never;
        patch: operations["api_reviews_partial_update"];
        trace?: never;
    };
    "/api/reviews/delete_all/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["api_reviews_delete_all_destroy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/schema/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description OpenApi3 schema for this API. Format can be selected via content negotiation.
         *
         *     - YAML: application/vnd.oai.openapi
         *     - JSON: application/vnd.oai.openapi+json */
        get: operations["api_schema_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/sellers/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_sellers_list"];
        put?: never;
        post: operations["api_sellers_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/sellers/{seller_id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_sellers_retrieve"];
        put: operations["api_sellers_update"];
        post?: never;
        delete: operations["api_sellers_destroy"];
        options?: never;
        head?: never;
        patch: operations["api_sellers_partial_update"];
        trace?: never;
    };
    "/api/sellers/{seller_id}/customers/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_sellers_customers_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/sellers/{seller_id}/customers/{customer_id}/products/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_sellers_customers_products_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/sellers/{seller_id}/products/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["api_sellers_products_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/sellers/{seller_id}/products/{product_id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_sellers_products_retrieve"];
        put?: never;
        post?: never;
        delete: operations["api_sellers_products_destroy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/sellers/{seller_id}/transactions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_sellers_transactions_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/store/dashboard/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_store_dashboard_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/subcategories/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_subcategories_list"];
        put?: never;
        post: operations["api_subcategories_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/subcategories/{sub_category_id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_subcategories_retrieve"];
        put: operations["api_subcategories_update"];
        post?: never;
        delete: operations["api_subcategories_destroy"];
        options?: never;
        head?: never;
        patch: operations["api_subcategories_partial_update"];
        trace?: never;
    };
    "/api/subcategories/delete_all/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["api_subcategories_delete_all_destroy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_users_list"];
        put?: never;
        post: operations["api_users_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{user_id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_users_retrieve"];
        put: operations["api_users_update"];
        post?: never;
        delete: operations["api_users_destroy"];
        options?: never;
        head?: never;
        patch: operations["api_users_partial_update"];
        trace?: never;
    };
    "/api/users/{user_id}/disable/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["api_users_disable_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{user_id}/enable/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["api_users_enable_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{user_id}/hard-delete/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["api_users_hard_delete_destroy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{user_id}/restore/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["api_users_restore_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/bulk_actions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get available bulk actions for the current user */
        get: operations["api_users_bulk_actions_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/bulk_disable/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Bulk disable users */
        post: operations["api_users_bulk_disable_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/bulk_enable/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Bulk enable users */
        post: operations["api_users_bulk_enable_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/deleted/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_users_deleted_retrieve"];
        put?: never;
        post?: never;
        delete: operations["api_users_deleted_destroy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/me/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_users_me_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/stats/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get user statistics for dashboard */
        get: operations["api_users_stats_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Cart: {
            /** Format: uuid */
            readonly cart_id: string;
            /** Format: uuid */
            user: string;
            readonly items: components["schemas"]["CartItem"][];
            readonly total_items: number;
            /** Format: decimal */
            readonly total_amount: string;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
        };
        CartItem: {
            /** Format: uuid */
            readonly cart_id: string;
            /** Format: uuid */
            readonly cart_item_id: string;
            product: string;
            /** Format: int64 */
            quantity?: number;
            /** Format: decimal */
            readonly unit_price: string;
            /** Format: decimal */
            readonly total_price: string;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
        };
        Category: {
            readonly category_id: number;
            category_name: string;
            category_description?: string;
            category_isActive?: boolean;
            /** Format: uri */
            category_image?: string | null;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
        };
        CustomTokenObtainPair: {
            user_email: string;
            password: string;
        };
        /**
         * @description * `PERCENTAGE` - Percentage
         *     * `FIXED` - Fixed
         * @enum {string}
         */
        DiscountTypeEnum: "PERCENTAGE" | "FIXED";
        LogoutRequest: {
            refresh_token: string;
        };
        Order: {
            /** Format: uuid */
            readonly order_id: string;
            /** Format: uuid */
            user_id?: string | null;
            /** Format: date-time */
            readonly order_date: string;
            /** Format: decimal */
            order_total?: string;
            order_status?: components["schemas"]["OrderStatusEnum"];
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            is_archived?: boolean;
            readonly order_number: string;
        };
        OrderItem: {
            readonly order_item_id: string;
            /** Format: uuid */
            order_id: string;
            product_id?: string | null;
            readonly product_name: string;
            readonly product_price: string;
            readonly first_name: string;
            readonly last_name: string;
            readonly business_name: string;
            readonly order_status: string;
            /** Format: int64 */
            quantity?: number;
            /** Format: decimal */
            total_item_price?: string;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
        };
        /**
         * @description * `PENDING` - Pending
         *     * `CONFIRMED` - Confirmed
         *     * `SHIPPED` - Shipped
         *     * `DELIVERED` - Delivered
         *     * `CANCELLED` - Cancelled
         *     * `REFUNDED` - Refunded
         * @enum {string}
         */
        OrderStatusEnum: "PENDING" | "CONFIRMED" | "SHIPPED" | "DELIVERED" | "CANCELLED" | "REFUNDED";
        PaginatedCategoryList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Category"][];
        };
        PaginatedOrderItemList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["OrderItem"][];
        };
        PaginatedOrderList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Order"][];
        };
        PaginatedPaymentList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Payment"][];
        };
        PaginatedProductList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Product"][];
        };
        PaginatedPromoList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Promo"][];
        };
        PaginatedReviewsList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Reviews"][];
        };
        PaginatedSellerList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Seller"][];
        };
        PaginatedSubCategoryList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["SubCategory"][];
        };
        PaginatedUserListList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["UserList"][];
        };
        PatchedCart: {
            /** Format: uuid */
            readonly cart_id?: string;
            /** Format: uuid */
            user?: string;
            readonly items?: components["schemas"]["CartItem"][];
            readonly total_items?: number;
            /** Format: decimal */
            readonly total_amount?: string;
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: date-time */
            readonly updated_at?: string;
        };
        PatchedCategory: {
            readonly category_id?: number;
            category_name?: string;
            category_description?: string;
            category_isActive?: boolean;
            /** Format: uri */
            category_image?: string | null;
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: date-time */
            readonly updated_at?: string;
        };
        PatchedOrder: {
            /** Format: uuid */
            readonly order_id?: string;
            /** Format: uuid */
            user_id?: string | null;
            /** Format: date-time */
            readonly order_date?: string;
            /** Format: decimal */
            order_total?: string;
            order_status?: components["schemas"]["OrderStatusEnum"];
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: date-time */
            readonly updated_at?: string;
            is_archived?: boolean;
            readonly order_number?: string;
        };
        PatchedOrderItem: {
            readonly order_item_id?: string;
            /** Format: uuid */
            order_id?: string;
            product_id?: string | null;
            readonly product_name?: string;
            readonly product_price?: string;
            readonly first_name?: string;
            readonly last_name?: string;
            readonly business_name?: string;
            readonly order_status?: string;
            /** Format: int64 */
            quantity?: number;
            /** Format: decimal */
            total_item_price?: string;
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: date-time */
            readonly updated_at?: string;
        };
        PatchedPayment: {
            readonly payment_id?: string;
            payment_method?: components["schemas"]["PaymentMethodEnum"];
            payment_status?: components["schemas"]["PaymentStatusEnum"];
            /** Format: decimal */
            amount?: string;
            /** Format: decimal */
            tax?: string;
            /** Format: decimal */
            revenue?: string;
            /** Format: date-time */
            readonly payment_date?: string | null;
            transaction_id?: string | null;
            gateway_response?: string | null;
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: date-time */
            readonly updated_at?: string;
            /** Format: uuid */
            order_id?: string;
        };
        PatchedProduct: {
            readonly product_id?: string;
            readonly user_id?: string;
            /** Format: uuid */
            seller_id?: string | null;
            product_name?: string;
            /** Format: decimal */
            product_price?: string;
            product_brief_description?: string;
            product_full_description?: string;
            /** Format: decimal */
            product_discountedPrice?: string | null;
            product_sku?: string | null;
            /** @default FRESH */
            product_status: components["schemas"]["ProductStatusEnum"];
            product_location?: string | null;
            sub_category_id?: string | null;
            readonly category_id?: string;
            /** Format: int64 */
            quantity?: number;
            /** Format: date-time */
            post_date?: string;
            /** Format: date-time */
            harvest_date?: string | null;
            is_active?: boolean;
            /** Format: int64 */
            review_count?: number;
            top_rated?: boolean;
            readonly discounted_amount?: string;
            is_discounted?: boolean;
            is_srp?: boolean;
            is_deleted?: boolean;
            /** Format: int64 */
            sell_count?: number;
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: date-time */
            readonly updated_at?: string;
            has_promo?: boolean;
        };
        PatchedPromo: {
            /** Format: uuid */
            readonly promo_id?: string;
            /** Format: uuid */
            seller_id?: string;
            product_id?: string[];
            promo_name?: string;
            promo_description?: string;
            discount_type?: components["schemas"]["DiscountTypeEnum"];
            /** Format: int64 */
            discount_amount?: number;
            /** Format: int64 */
            discount_percentage?: number;
            /** Format: date-time */
            promo_start_date?: string;
            /** Format: date-time */
            promo_end_date?: string;
            is_active?: boolean;
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: date-time */
            readonly updated_at?: string;
        };
        PatchedReviews: {
            readonly review_id?: string;
            product_id?: string | null;
            /** Format: uuid */
            user_id?: string | null;
            review_rating?: number;
            review_comment?: string;
            /** Format: date-time */
            readonly review_date?: string;
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: date-time */
            readonly updated_at?: string;
        };
        PatchedSeller: {
            /** Format: uuid */
            readonly seller_id?: string;
            /** Format: uuid */
            user_id?: string | null;
            business_name?: string;
            street?: string | null;
            barangay?: string | null;
            city?: string | null;
            province?: string | null;
            zip_code?: string | null;
            /** Format: int64 */
            business_phone?: number;
            /** Format: decimal */
            total_earnings?: string | null;
            /** Format: int64 */
            total_products?: number;
            /** Format: int64 */
            total_orders?: number;
            /** Format: int64 */
            total_reviews?: number;
            /** Format: decimal */
            average_rating?: string;
            /** Format: int64 */
            total_followers?: number;
            /** Format: int64 */
            total_likes?: number;
            /** Format: int64 */
            total_products_sold?: number;
            is_active?: boolean;
            is_deleted?: boolean;
            is_verified?: boolean;
            terms_accepted?: boolean;
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: date-time */
            readonly updated_at?: string;
        };
        PatchedSubCategory: {
            category_id?: number | null;
            readonly sub_category_id?: string;
            sub_category_name?: string;
            sub_category_description?: string;
            /** Format: uri */
            sub_category_image?: string | null;
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: date-time */
            readonly updated_at?: string;
        };
        PatchedUser: {
            /** Format: uuid */
            readonly user_id?: string;
            user_name?: string;
            first_name?: string;
            last_name?: string;
            readonly full_name?: string;
            /** Format: email */
            user_email?: string;
            password?: string;
            user_phone?: string;
            street?: string | null;
            barangay?: string | null;
            city?: string | null;
            province?: string | null;
            zip_code?: string | null;
            role?: components["schemas"]["RoleEnum"];
            readonly role_display?: string;
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: date-time */
            readonly updated_at?: string;
            readonly created_date?: string;
            readonly updated_date?: string;
            is_active?: boolean;
            is_deleted?: boolean;
            is_staff?: boolean;
            is_superuser?: boolean;
            terms_accepted?: boolean;
            phone_verified?: boolean;
            email_verified?: boolean;
            readonly status_display?: string;
        };
        Payment: {
            readonly payment_id: string;
            payment_method: components["schemas"]["PaymentMethodEnum"];
            payment_status?: components["schemas"]["PaymentStatusEnum"];
            /** Format: decimal */
            amount: string;
            /** Format: decimal */
            tax?: string;
            /** Format: decimal */
            revenue?: string;
            /** Format: date-time */
            readonly payment_date: string | null;
            transaction_id?: string | null;
            gateway_response?: string | null;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            /** Format: uuid */
            order_id: string;
        };
        /**
         * @description * `GCASH` - Gcash
         *     * `PAYMAYA` - PayMaya
         *     * `COD` - Cash on Delivery
         * @enum {string}
         */
        PaymentMethodEnum: "GCASH" | "PAYMAYA" | "COD";
        /**
         * @description * `PENDING` - Pending
         *     * `COMPLETED` - Completed
         *     * `FAILED` - Failed
         *     * `REFUNDED` - Refunded
         * @enum {string}
         */
        PaymentStatusEnum: "PENDING" | "COMPLETED" | "FAILED" | "REFUNDED";
        Product: {
            readonly product_id: string;
            readonly user_id: string;
            /** Format: uuid */
            seller_id?: string | null;
            product_name: string;
            /** Format: decimal */
            product_price?: string;
            product_brief_description: string;
            product_full_description: string;
            /** Format: decimal */
            product_discountedPrice?: string | null;
            product_sku?: string | null;
            /** @default FRESH */
            product_status: components["schemas"]["ProductStatusEnum"];
            product_location?: string | null;
            sub_category_id?: string | null;
            readonly category_id: string;
            /** Format: int64 */
            quantity?: number;
            /** Format: date-time */
            post_date?: string;
            /** Format: date-time */
            harvest_date?: string | null;
            is_active?: boolean;
            /** Format: int64 */
            review_count?: number;
            top_rated?: boolean;
            readonly discounted_amount: string;
            is_discounted?: boolean;
            is_srp?: boolean;
            is_deleted?: boolean;
            /** Format: int64 */
            sell_count?: number;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            has_promo?: boolean;
        };
        /**
         * @description * `ROTTEN` - Rotten
         *     * `SLIGHTLY_WITHERED` - Slightly Withered
         *     * `FRESH` - Fresh
         * @enum {string}
         */
        ProductStatusEnum: "ROTTEN" | "SLIGHTLY_WITHERED" | "FRESH";
        Promo: {
            /** Format: uuid */
            readonly promo_id: string;
            /** Format: uuid */
            seller_id?: string;
            product_id?: string[];
            promo_name: string;
            promo_description?: string;
            discount_type?: components["schemas"]["DiscountTypeEnum"];
            /** Format: int64 */
            discount_amount?: number;
            /** Format: int64 */
            discount_percentage?: number;
            /** Format: date-time */
            promo_start_date?: string;
            /** Format: date-time */
            promo_end_date?: string;
            is_active?: boolean;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
        };
        Reviews: {
            readonly review_id: string;
            product_id?: string | null;
            /** Format: uuid */
            user_id?: string | null;
            review_rating?: number;
            review_comment: string;
            /** Format: date-time */
            readonly review_date: string;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
        };
        /**
         * @description * `admin` - Admin
         *     * `seller` - Seller
         *     * `customer` - Customer
         * @enum {string}
         */
        RoleEnum: "admin" | "seller" | "customer";
        Seller: {
            /** Format: uuid */
            readonly seller_id: string;
            /** Format: uuid */
            user_id?: string | null;
            business_name?: string;
            street?: string | null;
            barangay?: string | null;
            city?: string | null;
            province?: string | null;
            zip_code?: string | null;
            /** Format: int64 */
            business_phone?: number;
            /** Format: decimal */
            total_earnings?: string | null;
            /** Format: int64 */
            total_products?: number;
            /** Format: int64 */
            total_orders?: number;
            /** Format: int64 */
            total_reviews?: number;
            /** Format: decimal */
            average_rating?: string;
            /** Format: int64 */
            total_followers?: number;
            /** Format: int64 */
            total_likes?: number;
            /** Format: int64 */
            total_products_sold?: number;
            is_active?: boolean;
            is_deleted?: boolean;
            is_verified?: boolean;
            terms_accepted?: boolean;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
        };
        SubCategory: {
            category_id?: number | null;
            readonly sub_category_id: string;
            sub_category_name?: string;
            sub_category_description: string;
            /** Format: uri */
            sub_category_image?: string | null;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
        };
        TokenRefresh: {
            readonly access: string;
            refresh: string;
        };
        User: {
            /** Format: uuid */
            readonly user_id: string;
            user_name: string;
            first_name: string;
            last_name: string;
            readonly full_name: string;
            /** Format: email */
            user_email?: string;
            password?: string;
            user_phone: string;
            street?: string | null;
            barangay?: string | null;
            city?: string | null;
            province?: string | null;
            zip_code?: string | null;
            role?: components["schemas"]["RoleEnum"];
            readonly role_display: string;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            readonly created_date: string;
            readonly updated_date: string;
            is_active?: boolean;
            is_deleted?: boolean;
            is_staff?: boolean;
            is_superuser?: boolean;
            terms_accepted?: boolean;
            phone_verified?: boolean;
            email_verified?: boolean;
            readonly status_display: string;
        };
        /** @description Lightweight serializer for user lists */
        UserList: {
            /** Format: uuid */
            readonly user_id: string;
            user_name: string;
            readonly full_name: string;
            /** Format: email */
            user_email?: string;
            role?: components["schemas"]["RoleEnum"];
            readonly role_display: string;
            is_active?: boolean;
            is_deleted?: boolean;
            readonly status_display: string;
            /** Format: date-time */
            readonly created_at: string;
            readonly created_date: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    api_admin_dashboard_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_auth_login_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CustomTokenObtainPair"];
                "application/x-www-form-urlencoded": components["schemas"]["CustomTokenObtainPair"];
                "multipart/form-data": components["schemas"]["CustomTokenObtainPair"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomTokenObtainPair"];
                };
            };
        };
    };
    api_auth_login_refresh_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TokenRefresh"];
                "application/x-www-form-urlencoded": components["schemas"]["TokenRefresh"];
                "multipart/form-data": components["schemas"]["TokenRefresh"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenRefresh"];
                };
            };
        };
    };
    api_auth_logout_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LogoutRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["LogoutRequest"];
                "multipart/form-data": components["schemas"]["LogoutRequest"];
            };
        };
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_auth_permissions_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_auth_permissions_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_auth_register_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["User"];
                "application/x-www-form-urlencoded": components["schemas"]["User"];
                "multipart/form-data": components["schemas"]["User"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    api_carts_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Cart"][];
                };
            };
        };
    };
    api_carts_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Cart"];
                "application/x-www-form-urlencoded": components["schemas"]["Cart"];
                "multipart/form-data": components["schemas"]["Cart"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Cart"];
                };
            };
        };
    };
    api_carts_clear_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Cart"];
                "application/x-www-form-urlencoded": components["schemas"]["Cart"];
                "multipart/form-data": components["schemas"]["Cart"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Cart"];
                };
            };
        };
    };
    api_carts_remove_item_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_carts_update_item_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedCart"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedCart"];
                "multipart/form-data": components["schemas"]["PatchedCart"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Cart"];
                };
            };
        };
    };
    api_categories_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedCategoryList"];
                };
            };
        };
    };
    api_categories_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Category"];
                "application/x-www-form-urlencoded": components["schemas"]["Category"];
                "multipart/form-data": components["schemas"]["Category"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"];
                };
            };
        };
    };
    api_categories_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this category. */
                category_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"];
                };
            };
        };
    };
    api_categories_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this category. */
                category_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Category"];
                "application/x-www-form-urlencoded": components["schemas"]["Category"];
                "multipart/form-data": components["schemas"]["Category"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"];
                };
            };
        };
    };
    api_categories_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this category. */
                category_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_categories_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this category. */
                category_id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedCategory"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedCategory"];
                "multipart/form-data": components["schemas"]["PatchedCategory"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"];
                };
            };
        };
    };
    api_categories_delete_all_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_order_items_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedOrderItemList"];
                };
            };
        };
    };
    api_order_items_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrderItem"];
                "application/x-www-form-urlencoded": components["schemas"]["OrderItem"];
                "multipart/form-data": components["schemas"]["OrderItem"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrderItem"];
                };
            };
        };
    };
    api_order_items_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this order item. */
                order_item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrderItem"];
                };
            };
        };
    };
    api_order_items_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this order item. */
                order_item_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrderItem"];
                "application/x-www-form-urlencoded": components["schemas"]["OrderItem"];
                "multipart/form-data": components["schemas"]["OrderItem"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrderItem"];
                };
            };
        };
    };
    api_order_items_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this order item. */
                order_item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_order_items_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this order item. */
                order_item_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedOrderItem"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedOrderItem"];
                "multipart/form-data": components["schemas"]["PatchedOrderItem"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrderItem"];
                };
            };
        };
    };
    api_order_items_delete_all_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_orders_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedOrderList"];
                };
            };
        };
    };
    api_orders_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Order"];
                "application/x-www-form-urlencoded": components["schemas"]["Order"];
                "multipart/form-data": components["schemas"]["Order"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"];
                };
            };
        };
    };
    api_orders_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this order. */
                order_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"];
                };
            };
        };
    };
    api_orders_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this order. */
                order_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Order"];
                "application/x-www-form-urlencoded": components["schemas"]["Order"];
                "multipart/form-data": components["schemas"]["Order"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"];
                };
            };
        };
    };
    api_orders_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this order. */
                order_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_orders_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this order. */
                order_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedOrder"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedOrder"];
                "multipart/form-data": components["schemas"]["PatchedOrder"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"];
                };
            };
        };
    };
    api_orders_archive_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this order. */
                order_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedOrder"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedOrder"];
                "multipart/form-data": components["schemas"]["PatchedOrder"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"];
                };
            };
        };
    };
    api_orders_update_status_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this order. */
                order_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedOrder"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedOrder"];
                "multipart/form-data": components["schemas"]["PatchedOrder"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"];
                };
            };
        };
    };
    api_orders_archived_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"];
                };
            };
        };
    };
    api_orders_checkout_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Order"];
                "application/x-www-form-urlencoded": components["schemas"]["Order"];
                "multipart/form-data": components["schemas"]["Order"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"];
                };
            };
        };
    };
    api_payments_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedPaymentList"];
                };
            };
        };
    };
    api_payments_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Payment"];
                "application/x-www-form-urlencoded": components["schemas"]["Payment"];
                "multipart/form-data": components["schemas"]["Payment"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payment"];
                };
            };
        };
    };
    api_payments_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this payment. */
                payment_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payment"];
                };
            };
        };
    };
    api_payments_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this payment. */
                payment_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Payment"];
                "application/x-www-form-urlencoded": components["schemas"]["Payment"];
                "multipart/form-data": components["schemas"]["Payment"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payment"];
                };
            };
        };
    };
    api_payments_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this payment. */
                payment_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_payments_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this payment. */
                payment_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedPayment"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedPayment"];
                "multipart/form-data": components["schemas"]["PatchedPayment"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payment"];
                };
            };
        };
    };
    api_payments_update_status_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this payment. */
                payment_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedPayment"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedPayment"];
                "multipart/form-data": components["schemas"]["PatchedPayment"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payment"];
                };
            };
        };
    };
    api_products_list: {
        parameters: {
            query?: {
                is_active?: boolean;
                is_deleted?: boolean;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                product_name?: string;
                product_price?: number;
                /** @description A search term. */
                search?: string;
                seller_id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedProductList"];
                };
            };
        };
    };
    api_products_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Product"];
                "application/x-www-form-urlencoded": components["schemas"]["Product"];
                "multipart/form-data": components["schemas"]["Product"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Product"];
                };
            };
        };
    };
    api_products_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this product. */
                product_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Product"];
                };
            };
        };
    };
    api_products_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this product. */
                product_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Product"];
                "application/x-www-form-urlencoded": components["schemas"]["Product"];
                "multipart/form-data": components["schemas"]["Product"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Product"];
                };
            };
        };
    };
    api_products_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this product. */
                product_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_products_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this product. */
                product_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedProduct"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedProduct"];
                "multipart/form-data": components["schemas"]["PatchedProduct"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Product"];
                };
            };
        };
    };
    api_products_restore_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this product. */
                product_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedProduct"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedProduct"];
                "multipart/form-data": components["schemas"]["PatchedProduct"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Product"];
                };
            };
        };
    };
    api_products_soft_delete_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this product. */
                product_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedProduct"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedProduct"];
                "multipart/form-data": components["schemas"]["PatchedProduct"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Product"];
                };
            };
        };
    };
    api_products_deleted_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Product"];
                };
            };
        };
    };
    api_promos_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedPromoList"];
                };
            };
        };
    };
    api_promos_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Promo"];
                "application/x-www-form-urlencoded": components["schemas"]["Promo"];
                "multipart/form-data": components["schemas"]["Promo"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Promo"];
                };
            };
        };
    };
    api_promos_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this promo. */
                promo_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Promo"];
                };
            };
        };
    };
    api_promos_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this promo. */
                promo_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Promo"];
                "application/x-www-form-urlencoded": components["schemas"]["Promo"];
                "multipart/form-data": components["schemas"]["Promo"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Promo"];
                };
            };
        };
    };
    api_promos_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this promo. */
                promo_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_promos_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this promo. */
                promo_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedPromo"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedPromo"];
                "multipart/form-data": components["schemas"]["PatchedPromo"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Promo"];
                };
            };
        };
    };
    api_promos_delete_all_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_reviews_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedReviewsList"];
                };
            };
        };
    };
    api_reviews_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Reviews"];
                "application/x-www-form-urlencoded": components["schemas"]["Reviews"];
                "multipart/form-data": components["schemas"]["Reviews"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Reviews"];
                };
            };
        };
    };
    api_reviews_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this reviews. */
                review_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Reviews"];
                };
            };
        };
    };
    api_reviews_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this reviews. */
                review_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Reviews"];
                "application/x-www-form-urlencoded": components["schemas"]["Reviews"];
                "multipart/form-data": components["schemas"]["Reviews"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Reviews"];
                };
            };
        };
    };
    api_reviews_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this reviews. */
                review_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_reviews_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this reviews. */
                review_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedReviews"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedReviews"];
                "multipart/form-data": components["schemas"]["PatchedReviews"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Reviews"];
                };
            };
        };
    };
    api_reviews_delete_all_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_schema_retrieve: {
        parameters: {
            query?: {
                format?: "json" | "yaml";
                lang?: "af" | "ar" | "ar-dz" | "ast" | "az" | "be" | "bg" | "bn" | "br" | "bs" | "ca" | "ckb" | "cs" | "cy" | "da" | "de" | "dsb" | "el" | "en" | "en-au" | "en-gb" | "eo" | "es" | "es-ar" | "es-co" | "es-mx" | "es-ni" | "es-ve" | "et" | "eu" | "fa" | "fi" | "fr" | "fy" | "ga" | "gd" | "gl" | "he" | "hi" | "hr" | "hsb" | "hu" | "hy" | "ia" | "id" | "ig" | "io" | "is" | "it" | "ja" | "ka" | "kab" | "kk" | "km" | "kn" | "ko" | "ky" | "lb" | "lt" | "lv" | "mk" | "ml" | "mn" | "mr" | "ms" | "my" | "nb" | "ne" | "nl" | "nn" | "os" | "pa" | "pl" | "pt" | "pt-br" | "ro" | "ru" | "sk" | "sl" | "sq" | "sr" | "sr-latn" | "sv" | "sw" | "ta" | "te" | "tg" | "th" | "tk" | "tr" | "tt" | "udm" | "ug" | "uk" | "ur" | "uz" | "vi" | "zh-hans" | "zh-hant";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.oai.openapi": {
                        [key: string]: unknown;
                    };
                    "application/yaml": {
                        [key: string]: unknown;
                    };
                    "application/vnd.oai.openapi+json": {
                        [key: string]: unknown;
                    };
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    api_sellers_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedSellerList"];
                };
            };
        };
    };
    api_sellers_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Seller"];
                "application/x-www-form-urlencoded": components["schemas"]["Seller"];
                "multipart/form-data": components["schemas"]["Seller"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Seller"];
                };
            };
        };
    };
    api_sellers_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this seller. */
                seller_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Seller"];
                };
            };
        };
    };
    api_sellers_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this seller. */
                seller_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Seller"];
                "application/x-www-form-urlencoded": components["schemas"]["Seller"];
                "multipart/form-data": components["schemas"]["Seller"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Seller"];
                };
            };
        };
    };
    api_sellers_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this seller. */
                seller_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_sellers_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this seller. */
                seller_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedSeller"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedSeller"];
                "multipart/form-data": components["schemas"]["PatchedSeller"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Seller"];
                };
            };
        };
    };
    api_sellers_customers_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this seller. */
                seller_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Seller"];
                };
            };
        };
    };
    api_sellers_customers_products_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customer_id: string;
                /** @description A UUID string identifying this seller. */
                seller_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Seller"];
                };
            };
        };
    };
    api_sellers_products_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this seller. */
                seller_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Seller"];
                "application/x-www-form-urlencoded": components["schemas"]["Seller"];
                "multipart/form-data": components["schemas"]["Seller"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Seller"];
                };
            };
        };
    };
    api_sellers_products_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                product_id: string;
                /** @description A UUID string identifying this seller. */
                seller_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Seller"];
                };
            };
        };
    };
    api_sellers_products_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                product_id: string;
                /** @description A UUID string identifying this seller. */
                seller_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_sellers_transactions_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this seller. */
                seller_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Seller"];
                };
            };
        };
    };
    api_store_dashboard_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_subcategories_list: {
        parameters: {
            query?: {
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedSubCategoryList"];
                };
            };
        };
    };
    api_subcategories_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SubCategory"];
                "application/x-www-form-urlencoded": components["schemas"]["SubCategory"];
                "multipart/form-data": components["schemas"]["SubCategory"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubCategory"];
                };
            };
        };
    };
    api_subcategories_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this SubCategory. */
                sub_category_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubCategory"];
                };
            };
        };
    };
    api_subcategories_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this SubCategory. */
                sub_category_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SubCategory"];
                "application/x-www-form-urlencoded": components["schemas"]["SubCategory"];
                "multipart/form-data": components["schemas"]["SubCategory"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubCategory"];
                };
            };
        };
    };
    api_subcategories_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this SubCategory. */
                sub_category_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_subcategories_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique value identifying this SubCategory. */
                sub_category_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedSubCategory"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedSubCategory"];
                "multipart/form-data": components["schemas"]["PatchedSubCategory"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubCategory"];
                };
            };
        };
    };
    api_subcategories_delete_all_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_users_list: {
        parameters: {
            query?: {
                created_at?: string;
                first_name?: string;
                is_active?: boolean;
                is_deleted?: boolean;
                last_name?: string;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description * `admin` - Admin
                 *     * `seller` - Seller
                 *     * `customer` - Customer */
                role?: "admin" | "customer" | "seller";
                /** @description A search term. */
                search?: string;
                user_email?: string;
                user_name?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedUserListList"];
                };
            };
        };
    };
    api_users_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["User"];
                "application/x-www-form-urlencoded": components["schemas"]["User"];
                "multipart/form-data": components["schemas"]["User"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    api_users_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this User. */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    api_users_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this User. */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["User"];
                "application/x-www-form-urlencoded": components["schemas"]["User"];
                "multipart/form-data": components["schemas"]["User"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    api_users_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this User. */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_users_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this User. */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedUser"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedUser"];
                "multipart/form-data": components["schemas"]["PatchedUser"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    api_users_disable_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this User. */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["User"];
                "application/x-www-form-urlencoded": components["schemas"]["User"];
                "multipart/form-data": components["schemas"]["User"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    api_users_enable_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this User. */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["User"];
                "application/x-www-form-urlencoded": components["schemas"]["User"];
                "multipart/form-data": components["schemas"]["User"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    api_users_hard_delete_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this User. */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_users_restore_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A UUID string identifying this User. */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["User"];
                "application/x-www-form-urlencoded": components["schemas"]["User"];
                "multipart/form-data": components["schemas"]["User"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    api_users_bulk_actions_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    api_users_bulk_disable_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["User"];
                "application/x-www-form-urlencoded": components["schemas"]["User"];
                "multipart/form-data": components["schemas"]["User"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    api_users_bulk_enable_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["User"];
                "application/x-www-form-urlencoded": components["schemas"]["User"];
                "multipart/form-data": components["schemas"]["User"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    api_users_deleted_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    api_users_deleted_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    api_users_me_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    api_users_stats_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
}
